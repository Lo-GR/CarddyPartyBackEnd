// <auto-generated />
using CarddyPartyBackEnd.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarddyPartyBackEnd.Migrations
{
    [DbContext(typeof(CarddyPartyBackEndContext))]
    partial class CarddyPartyBackEndContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CarddyPartyBackEnd.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.HasIndex("PlayerID");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            CardId = 1,
                            Answer = "",
                            PlayerID = 1
                        },
                        new
                        {
                            CardId = 2,
                            Answer = "",
                            PlayerID = 2
                        },
                        new
                        {
                            CardId = 3,
                            Answer = "",
                            PlayerID = 1
                        },
                        new
                        {
                            CardId = 4,
                            Answer = "",
                            PlayerID = 2
                        });
                });

            modelBuilder.Entity("CarddyPartyBackEnd.Models.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("PlayerID");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerID = 1,
                            Name = "P1",
                            Points = 0
                        },
                        new
                        {
                            PlayerID = 2,
                            Name = "P2",
                            Points = 0
                        },
                        new
                        {
                            PlayerID = 3,
                            Name = "P3",
                            Points = 0
                        },
                        new
                        {
                            PlayerID = 4,
                            Name = "P4",
                            Points = 0
                        });
                });

            modelBuilder.Entity("CarddyPartyBackEnd.Models.Prompt", b =>
                {
                    b.Property<int>("PromptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Theme")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PromptId");

                    b.ToTable("Prompts");

                    b.HasData(
                        new
                        {
                            PromptId = 1,
                            Description = "Who was the best President?",
                            Theme = "politics"
                        },
                        new
                        {
                            PromptId = 2,
                            Description = "Why did the cat cross the road?",
                            Theme = "jokes"
                        },
                        new
                        {
                            PromptId = 3,
                            Description = "The unintentional best thing about Epicodus is",
                            Theme = "epicodus"
                        },
                        new
                        {
                            PromptId = 4,
                            Description = "Who had the worst scandal?",
                            Theme = "politics"
                        },
                        new
                        {
                            PromptId = 5,
                            Description = "Why did my dad leave me?",
                            Theme = "jokes"
                        },
                        new
                        {
                            PromptId = 6,
                            Description = "Epicodus is terrible at",
                            Theme = "epicodus"
                        },
                        new
                        {
                            PromptId = 7,
                            Description = "Today's stand up at Epicodus was",
                            Theme = "epicodus"
                        },
                        new
                        {
                            PromptId = 8,
                            Description = "My dev group last week was",
                            Theme = "epicodus"
                        },
                        new
                        {
                            PromptId = 9,
                            Description = "It's like Leilani always says: ",
                            Theme = "epicodus"
                        },
                        new
                        {
                            PromptId = 10,
                            Description = "The worst President was",
                            Theme = "politics"
                        },
                        new
                        {
                            PromptId = 11,
                            Description = "If I had the opportunity, I would vote for ___ again",
                            Theme = "politics"
                        },
                        new
                        {
                            PromptId = 12,
                            Description = "The reason flamingos stand on one leg is",
                            Theme = "jokes"
                        },
                        new
                        {
                            PromptId = 13,
                            Description = "A chicken walks into a bar because",
                            Theme = "jokes"
                        },
                        new
                        {
                            PromptId = 14,
                            Description = "6 words or less to make an entire group of people mad",
                            Theme = "situational"
                        },
                        new
                        {
                            PromptId = 15,
                            Description = "The three words I want to hear from any romantic partner",
                            Theme = "situational"
                        },
                        new
                        {
                            PromptId = 16,
                            Description = "And then I told my boss ____ and got fired",
                            Theme = "situational"
                        },
                        new
                        {
                            PromptId = 17,
                            Description = "My mom always told me..",
                            Theme = "situational"
                        },
                        new
                        {
                            PromptId = 18,
                            Description = "Your final words before you're burned as a witch in Salem",
                            Theme = "situational"
                        },
                        new
                        {
                            PromptId = 19,
                            Description = "Fill in the blank: All I want for Christmas is ____",
                            Theme = "blanks"
                        },
                        new
                        {
                            PromptId = 20,
                            Description = "Fill in the blank: Keep the change you filthy _____ ",
                            Theme = "blanks"
                        },
                        new
                        {
                            PromptId = 21,
                            Description = "Fill in the blank: Everywhere the light touches is _____ ",
                            Theme = "blanks"
                        },
                        new
                        {
                            PromptId = 22,
                            Description = "Fill in the blank: I have a feeling we're not ___ anymore ",
                            Theme = "blanks"
                        },
                        new
                        {
                            PromptId = 23,
                            Description = "Fill in the blank: May the ___ be with you ",
                            Theme = "blanks"
                        },
                        new
                        {
                            PromptId = 24,
                            Description = "Fill in the blank: ______, my dear Watson",
                            Theme = "blanks"
                        },
                        new
                        {
                            PromptId = 25,
                            Description = "Fill in the blank: Soylent green is _____",
                            Theme = "blanks"
                        });
                });

            modelBuilder.Entity("CarddyPartyBackEnd.Models.Select", b =>
                {
                    b.Property<int>("SelectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("selectedcard")
                        .HasColumnType("int");

                    b.HasKey("SelectId");

                    b.ToTable("Selects");

                    b.HasData(
                        new
                        {
                            SelectId = 1,
                            selectedcard = 1
                        },
                        new
                        {
                            SelectId = 2,
                            selectedcard = 1
                        },
                        new
                        {
                            SelectId = 3,
                            selectedcard = 1
                        },
                        new
                        {
                            SelectId = 4,
                            selectedcard = 1
                        });
                });

            modelBuilder.Entity("CarddyPartyBackEnd.Models.Card", b =>
                {
                    b.HasOne("CarddyPartyBackEnd.Models.Player", null)
                        .WithMany("Cards")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarddyPartyBackEnd.Models.Player", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
